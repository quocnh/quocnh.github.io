<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://quocnh.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://quocnh.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-11-29T01:47:54+00:00</updated><id>https://quocnh.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">238. Product of Array Except Self</title><link href="https://quocnh.github.io/blog/2024/leetcode-product-of-array-except-self/" rel="alternate" type="text/html" title="238. Product of Array Except Self"/><published>2024-11-28T00:00:00+00:00</published><updated>2024-11-28T00:00:00+00:00</updated><id>https://quocnh.github.io/blog/2024/leetcode-product-of-array-except-self</id><content type="html" xml:base="https://quocnh.github.io/blog/2024/leetcode-product-of-array-except-self/"><![CDATA[<p>Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].</p> <p>The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.</p> <p>You must write an algorithm that runs in O(n) time and without using the division operation.</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">Example</span> <span class="err">1</span><span class="o">:</span>

<span class="nt">Input</span><span class="o">:</span> <span class="nt">nums</span> <span class="o">=</span> <span class="o">[</span><span class="err">1</span><span class="o">,</span><span class="err">2</span><span class="o">,</span><span class="err">3</span><span class="o">,</span><span class="err">4</span><span class="o">]</span>
<span class="nt">Output</span><span class="o">:</span> <span class="o">[</span><span class="err">24</span><span class="o">,</span><span class="err">12</span><span class="o">,</span><span class="err">8</span><span class="o">,</span><span class="err">6</span><span class="o">]</span>

<span class="nt">Example</span> <span class="err">2</span><span class="o">:</span>

<span class="nt">Input</span><span class="o">:</span> <span class="nt">nums</span> <span class="o">=</span> <span class="o">[</span><span class="nt">-1</span><span class="o">,</span><span class="err">1</span><span class="o">,</span><span class="err">0</span><span class="o">,</span><span class="nt">-3</span><span class="o">,</span><span class="err">3</span><span class="o">]</span>
<span class="nt">Output</span><span class="o">:</span> <span class="o">[</span><span class="err">0</span><span class="o">,</span><span class="err">0</span><span class="o">,</span><span class="err">9</span><span class="o">,</span><span class="err">0</span><span class="o">,</span><span class="err">0</span><span class="o">]</span>

 

<span class="nt">Constraints</span><span class="o">:</span>

    <span class="err">2</span> <span class="o">&lt;=</span> <span class="nt">nums</span><span class="nc">.length</span> <span class="o">&lt;=</span> <span class="err">105</span>
    <span class="nt">-30</span> <span class="o">&lt;=</span> <span class="nt">nums</span><span class="o">[</span><span class="nt">i</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="err">30</span>
    <span class="nt">The</span> <span class="nt">product</span> <span class="nt">of</span> <span class="nt">any</span> <span class="nt">prefix</span> <span class="nt">or</span> <span class="nt">suffix</span> <span class="nt">of</span> <span class="nt">nums</span> <span class="nt">is</span> <span class="nt">guaranteed</span> <span class="nt">to</span> <span class="nt">fit</span> <span class="nt">in</span> <span class="nt">a</span> <span class="err">32</span><span class="nt">-bit</span> <span class="nt">integer</span><span class="o">.</span>

 

<span class="nt">Follow</span> <span class="nt">up</span><span class="o">:</span> <span class="nt">Can</span> <span class="nt">you</span> <span class="nt">solve</span> <span class="nt">the</span> <span class="nt">problem</span> <span class="nt">in</span> <span class="nt">O</span><span class="o">(</span><span class="err">1</span><span class="o">)</span> <span class="nt">extra</span> <span class="nt">space</span> <span class="nt">complexity</span><span class="o">?</span> <span class="o">(</span><span class="nt">The</span> <span class="nt">output</span> <span class="nt">array</span> <span class="nt">does</span> <span class="nt">not</span> <span class="nt">count</span> <span class="nt">as</span> <span class="nt">extra</span> <span class="nt">space</span> <span class="nt">for</span> <span class="nt">space</span> <span class="nt">complexity</span> <span class="nt">analysis</span><span class="o">.)</span>
</code></pre></div></div>]]></content><author><name>Quoc Nguyen</name></author><category term="leetcode"/><summary type="html"><![CDATA[Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].]]></summary></entry><entry><title type="html">345. Reverse Vowels of a String</title><link href="https://quocnh.github.io/blog/2024/leetcode-reserve-vowels/" rel="alternate" type="text/html" title="345. Reverse Vowels of a String"/><published>2024-11-27T00:00:00+00:00</published><updated>2024-11-27T00:00:00+00:00</updated><id>https://quocnh.github.io/blog/2024/leetcode-reserve-vowels</id><content type="html" xml:base="https://quocnh.github.io/blog/2024/leetcode-reserve-vowels/"><![CDATA[<p>Given a string s, reverse only all the vowels in the string and return it.</p> <p>The vowels are ‘a’, ‘e’, ‘i’, ‘o’, and ‘u’, and they can appear in both lower and upper cases, more than once.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Example</span> <span class="mi">1</span><span class="p">:</span>

<span class="n">Input</span><span class="p">:</span> <span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">IceCreAm</span><span class="sh">"</span>

<span class="n">Output</span><span class="p">:</span> <span class="sh">"</span><span class="s">AceCreIm</span><span class="sh">"</span>

<span class="n">Explanation</span><span class="p">:</span>

<span class="n">The</span> <span class="n">vowels</span> <span class="ow">in</span> <span class="n">s</span> <span class="n">are</span> <span class="p">[</span><span class="sh">'</span><span class="s">I</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">e</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">e</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">A</span><span class="sh">'</span><span class="p">].</span> <span class="n">On</span> <span class="n">reversing</span> <span class="n">the</span> <span class="n">vowels</span><span class="p">,</span> <span class="n">s</span> <span class="n">becomes</span> <span class="sh">"</span><span class="s">AceCreIm</span><span class="sh">"</span><span class="p">.</span>

<span class="n">Example</span> <span class="mi">2</span><span class="p">:</span>

<span class="n">Input</span><span class="p">:</span> <span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">leetcode</span><span class="sh">"</span>

<span class="n">Output</span><span class="p">:</span> <span class="sh">"</span><span class="s">leotcede</span><span class="sh">"</span>

<span class="n">Constraints</span><span class="p">:</span>

    <span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">s</span><span class="p">.</span><span class="n">length</span> <span class="o">&lt;=</span> <span class="mi">3</span> <span class="o">*</span> <span class="mi">105</span>
    <span class="n">s</span> <span class="n">consist</span> <span class="n">of</span> <span class="n">printable</span> <span class="n">ASCII</span> <span class="n">characters</span><span class="p">.</span>

</code></pre></div></div> <h2 id="brute-force">Brute Force</h2> <ul> <li>Time complexity: O(n)</li> <li>Memory complexity: O(1)</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">reverseVowels</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type s: str
        :rtype: str
        </span><span class="sh">"""</span>
        <span class="n">vowels</span> <span class="o">=</span> <span class="sh">"</span><span class="s">aeiouAEIOU</span><span class="sh">"</span>
        <span class="n">vowels</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">vowels</span><span class="p">)</span>
        <span class="n">s</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
        <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">j</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>
        <span class="c1"># i , j = 0, len(s) -1
</span>        <span class="nf">while</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">in</span> <span class="n">vowels</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="ow">in</span> <span class="n">vowels</span><span class="p">:</span>
                <span class="c1"># swap
</span>               <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
               <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
               <span class="n">j</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="k">elif</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">vowels</span><span class="p">:</span>
                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">elif</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">vowels</span><span class="p">:</span>
                <span class="n">j</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
        <span class="c1"># vowels = ['a', 'A', 'e', 'E', 'i', 'I', 'o', 'O', 'u', 'U']
</span>        <span class="c1"># my_vowels = []
</span>        <span class="c1"># ans = ""
</span>        <span class="c1"># for char in s:
</span>        <span class="c1">#     if char in vowels:
</span>        <span class="c1">#         my_vowels.append(char)
</span>        <span class="c1"># for index,char in enumerate(s):
</span>        <span class="c1">#     if char in vowels:
</span>        <span class="c1">#         ans += str(my_vowels.pop())
</span>        <span class="c1">#     else:
</span>        <span class="c1">#         ans += str(char)
</span>        <span class="c1"># return ans
</span></code></pre></div></div>]]></content><author><name>Quoc Nguyen</name></author><category term="leetcode"/><summary type="html"><![CDATA[Given a string s, reverse only all the vowels in the string and return it.]]></summary></entry><entry><title type="html">151. Reverse Words in a String</title><link href="https://quocnh.github.io/blog/2024/leetcode-reverse-words_in_a_string/" rel="alternate" type="text/html" title="151. Reverse Words in a String"/><published>2024-11-27T00:00:00+00:00</published><updated>2024-11-27T00:00:00+00:00</updated><id>https://quocnh.github.io/blog/2024/leetcode-reverse%20-words_in_a_string</id><content type="html" xml:base="https://quocnh.github.io/blog/2024/leetcode-reverse-words_in_a_string/"><![CDATA[<p>Given an input string s, reverse the order of the words.</p> <p>A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.</p> <p>Return a string of the words in reverse order concatenated by a single space.</p> <p>Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Example</span> <span class="mi">1</span><span class="p">:</span>

<span class="n">Input</span><span class="p">:</span> <span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">the sky is blue</span><span class="sh">"</span>
<span class="n">Output</span><span class="p">:</span> <span class="sh">"</span><span class="s">blue is sky the</span><span class="sh">"</span>

<span class="n">Example</span> <span class="mi">2</span><span class="p">:</span>

<span class="n">Input</span><span class="p">:</span> <span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">  hello world  </span><span class="sh">"</span>
<span class="n">Output</span><span class="p">:</span> <span class="sh">"</span><span class="s">world hello</span><span class="sh">"</span>
<span class="n">Explanation</span><span class="p">:</span> <span class="n">Your</span> <span class="nb">reversed</span> <span class="n">string</span> <span class="n">should</span> <span class="ow">not</span> <span class="n">contain</span> <span class="n">leading</span> <span class="ow">or</span> <span class="n">trailing</span> <span class="n">spaces</span><span class="p">.</span>

<span class="n">Example</span> <span class="mi">3</span><span class="p">:</span>

<span class="n">Input</span><span class="p">:</span> <span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">a good   example</span><span class="sh">"</span>
<span class="n">Output</span><span class="p">:</span> <span class="sh">"</span><span class="s">example good a</span><span class="sh">"</span>
<span class="n">Explanation</span><span class="p">:</span> <span class="n">You</span> <span class="n">need</span> <span class="n">to</span> <span class="nb">reduce</span> <span class="n">multiple</span> <span class="n">spaces</span> <span class="n">between</span> <span class="n">two</span> <span class="n">words</span> <span class="n">to</span> <span class="n">a</span> <span class="n">single</span> <span class="n">space</span> <span class="ow">in</span> <span class="n">the</span> <span class="nb">reversed</span> <span class="n">string</span><span class="p">.</span>
</code></pre></div></div> <p>build-in function to handle string, array</p> <ol> <li>split()</li> <li>reversed()</li> <li>”“.join()</li> <li>strip(), remove learning and trailing spaces</li> </ol> <h2 id="solution">Solution</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">reverseWords</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type s: str
        :rtype: str
        </span><span class="sh">"""</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">reversed</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="nf">split</span><span class="p">()))</span>
</code></pre></div></div>]]></content><author><name>Quoc Nguyen</name></author><category term="leetcode"/><summary type="html"><![CDATA[Given an input string s, reverse the order of the words.]]></summary></entry><entry><title type="html">1431. Kids With the Greatest Number of Candies</title><link href="https://quocnh.github.io/blog/2024/leetcode-1431.KidsWiththeGreatestNumberofCandies/" rel="alternate" type="text/html" title="1431. Kids With the Greatest Number of Candies"/><published>2024-11-26T00:00:00+00:00</published><updated>2024-11-26T00:00:00+00:00</updated><id>https://quocnh.github.io/blog/2024/leetcode-1431.KidsWiththeGreatestNumberofCandies</id><content type="html" xml:base="https://quocnh.github.io/blog/2024/leetcode-1431.KidsWiththeGreatestNumberofCandies/"><![CDATA[<p>There are n kids with candies. You are given an integer array candies, where each candies[i] represents the number of candies the ith kid has, and an integer extraCandies, denoting the number of extra candies that you have.</p> <p>Return a boolean array result of length n, where result[i] is true if, after giving the ith kid all the extraCandies, they will have the greatest number of candies among all the kids, or false otherwise.</p> <p>Note that multiple kids can have the greatest number of candies.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">Example</span> <span class="mi">1</span><span class="p">:</span>

<span class="n">Input</span><span class="p">:</span> <span class="n">candies</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span> <span class="n">extraCandies</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">Output</span><span class="p">:</span> <span class="p">[</span><span class="n">true</span><span class="p">,</span><span class="n">true</span><span class="p">,</span><span class="n">true</span><span class="p">,</span><span class="n">false</span><span class="p">,</span><span class="n">true</span><span class="p">]</span> 
<span class="n">Explanation</span><span class="p">:</span> <span class="n">If</span> <span class="n">you</span> <span class="n">give</span> <span class="nb">all</span> <span class="n">extraCandies</span> <span class="n">to</span><span class="p">:</span>
<span class="o">-</span> <span class="n">Kid</span> <span class="mi">1</span><span class="p">,</span> <span class="n">they</span> <span class="n">will</span> <span class="n">have</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">3</span> <span class="o">=</span> <span class="mi">5</span> <span class="n">candies</span><span class="p">,</span> <span class="n">which</span> <span class="ow">is</span> <span class="n">the</span> <span class="n">greatest</span> <span class="n">among</span> <span class="n">the</span> <span class="n">kids</span><span class="p">.</span>
<span class="o">-</span> <span class="n">Kid</span> <span class="mi">2</span><span class="p">,</span> <span class="n">they</span> <span class="n">will</span> <span class="n">have</span> <span class="mi">3</span> <span class="o">+</span> <span class="mi">3</span> <span class="o">=</span> <span class="mi">6</span> <span class="n">candies</span><span class="p">,</span> <span class="n">which</span> <span class="ow">is</span> <span class="n">the</span> <span class="n">greatest</span> <span class="n">among</span> <span class="n">the</span> <span class="n">kids</span><span class="p">.</span>
<span class="o">-</span> <span class="n">Kid</span> <span class="mi">3</span><span class="p">,</span> <span class="n">they</span> <span class="n">will</span> <span class="n">have</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">3</span> <span class="o">=</span> <span class="mi">8</span> <span class="n">candies</span><span class="p">,</span> <span class="n">which</span> <span class="ow">is</span> <span class="n">the</span> <span class="n">greatest</span> <span class="n">among</span> <span class="n">the</span> <span class="n">kids</span><span class="p">.</span>
<span class="o">-</span> <span class="n">Kid</span> <span class="mi">4</span><span class="p">,</span> <span class="n">they</span> <span class="n">will</span> <span class="n">have</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">3</span> <span class="o">=</span> <span class="mi">4</span> <span class="n">candies</span><span class="p">,</span> <span class="n">which</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">the</span> <span class="n">greatest</span> <span class="n">among</span> <span class="n">the</span> <span class="n">kids</span><span class="p">.</span>
<span class="o">-</span> <span class="n">Kid</span> <span class="mi">5</span><span class="p">,</span> <span class="n">they</span> <span class="n">will</span> <span class="n">have</span> <span class="mi">3</span> <span class="o">+</span> <span class="mi">3</span> <span class="o">=</span> <span class="mi">6</span> <span class="n">candies</span><span class="p">,</span> <span class="n">which</span> <span class="ow">is</span> <span class="n">the</span> <span class="n">greatest</span> <span class="n">among</span> <span class="n">the</span> <span class="n">kids</span><span class="p">.</span>

<span class="n">Example</span> <span class="mi">2</span><span class="p">:</span>

<span class="n">Input</span><span class="p">:</span> <span class="n">candies</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span> <span class="n">extraCandies</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">Output</span><span class="p">:</span> <span class="p">[</span><span class="n">true</span><span class="p">,</span><span class="n">false</span><span class="p">,</span><span class="n">false</span><span class="p">,</span><span class="n">false</span><span class="p">,</span><span class="n">false</span><span class="p">]</span> 
<span class="n">Explanation</span><span class="p">:</span> <span class="n">There</span> <span class="ow">is</span> <span class="n">only</span> <span class="mi">1</span> <span class="n">extra</span> <span class="n">candy</span><span class="p">.</span>
<span class="n">Kid</span> <span class="mi">1</span> <span class="n">will</span> <span class="n">always</span> <span class="n">have</span> <span class="n">the</span> <span class="n">greatest</span> <span class="n">number</span> <span class="n">of</span> <span class="n">candies</span><span class="p">,</span> <span class="n">even</span> <span class="k">if</span> <span class="n">a</span> <span class="n">different</span> <span class="n">kid</span> <span class="ow">is</span> <span class="n">given</span> <span class="n">the</span> <span class="n">extra</span> <span class="n">candy</span><span class="p">.</span>

<span class="n">Example</span> <span class="mi">3</span><span class="p">:</span>

<span class="n">Input</span><span class="p">:</span> <span class="n">candies</span> <span class="o">=</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">12</span><span class="p">],</span> <span class="n">extraCandies</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">Output</span><span class="p">:</span> <span class="p">[</span><span class="n">true</span><span class="p">,</span><span class="n">false</span><span class="p">,</span><span class="n">true</span><span class="p">]</span>
</code></pre></div></div> <h2 id="solution">Solution</h2> <ul> <li>Time complexity: O(n)</li> <li>Memory complexity: O(1)</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">kidsWithCandies</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">candies</span><span class="p">,</span> <span class="n">extraCandies</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type candies: List[int]
        :type extraCandies: int
        :rtype: List[bool]
        </span><span class="sh">"""</span>
        <span class="n">output</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">tmp</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">candies</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">candies</span><span class="p">)):</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">candies</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">extraCandies</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">tmp</span><span class="p">:</span>
                <span class="n">output</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">output</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">output</span>
</code></pre></div></div>]]></content><author><name>Quoc Nguyen</name></author><category term="leetcode"/><category term="tutorials"/><category term="leetcode"/><summary type="html"><![CDATA[There are n kids with candies. You are given an integer array candies, where each candies[i] represents the number of candies the ith kid has, and an integer extraCandies, denoting the number of extra candies that you have.]]></summary></entry><entry><title type="html">605. Can Place Flowers</title><link href="https://quocnh.github.io/blog/2024/leetcode-can_place_flowers/" rel="alternate" type="text/html" title="605. Can Place Flowers"/><published>2024-11-26T00:00:00+00:00</published><updated>2024-11-26T00:00:00+00:00</updated><id>https://quocnh.github.io/blog/2024/leetcode-can_place_flowers</id><content type="html" xml:base="https://quocnh.github.io/blog/2024/leetcode-can_place_flowers/"><![CDATA[<p>You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.</p> <p>Given an integer array flowerbed containing 0’s and 1’s, where 0 means empty and 1 means not empty, and an integer n, return true if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule and false otherwise.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Example</span> <span class="mi">1</span><span class="p">:</span>

<span class="n">Input</span><span class="p">:</span> <span class="n">flowerbed</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">Output</span><span class="p">:</span> <span class="n">true</span>

<span class="n">Example</span> <span class="mi">2</span><span class="p">:</span>

<span class="n">Input</span><span class="p">:</span> <span class="n">flowerbed</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">Output</span><span class="p">:</span> <span class="n">false</span>
</code></pre></div></div> <h2 id="solution">Solution</h2> <ul> <li>Time complexity: O(n). A single scan of the flowerbed array of size n is done.</li> <li>Space complexity: O(1). Constant extra space is used.</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">canPlaceFlowers</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">flowerbed</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type flowerbed: List[int]
        :type n: int
        :rtype: bool
        </span><span class="sh">"""</span>
       <span class="c1"># Check all current plot has 0 whether it is left_empty_plot or right_empty_plot (check first and last plot)
</span>       <span class="c1"># if the current plot has left and right empty, then we can plant a tree ( count ++)
</span>       <span class="c1"># if count &gt;= n return True
</span>
        <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">flowerbed</span><span class="p">)):</span>
            <span class="c1"># if (i == 0) or (flowerbed[i-1] == 0)
</span>            <span class="c1">#     left_empty_plot = True
</span>            <span class="c1"># else:
</span>            <span class="c1">#     left_empty_plot = False
</span>            <span class="k">if</span> <span class="n">flowerbed</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">left_empty_plot</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">flowerbed</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
                <span class="n">right_empty_plot</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="n">flowerbed</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">flowerbed</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>

                <span class="k">if</span> <span class="n">left_empty_plot</span> <span class="ow">and</span> <span class="n">right_empty_plot</span><span class="p">:</span>
                    <span class="n">flowerbed</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
                    <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">if</span> <span class="n">count</span> <span class="o">&gt;=</span> <span class="n">n</span><span class="p">:</span>
                        <span class="k">return</span> <span class="bp">True</span>
        <span class="k">return</span> <span class="n">count</span> <span class="o">&gt;=</span> <span class="n">n</span>

</code></pre></div></div>]]></content><author><name>Quoc Nguyen</name></author><category term="leetcode"/><summary type="html"><![CDATA[You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.]]></summary></entry><entry><title type="html">1071. Greatest Common Divisor of String</title><link href="https://quocnh.github.io/blog/2024/leetcode-greatest-common-divisors-of-string/" rel="alternate" type="text/html" title="1071. Greatest Common Divisor of String"/><published>2024-11-26T00:00:00+00:00</published><updated>2024-11-26T00:00:00+00:00</updated><id>https://quocnh.github.io/blog/2024/leetcode-greatest-common-divisors-of-string</id><content type="html" xml:base="https://quocnh.github.io/blog/2024/leetcode-greatest-common-divisors-of-string/"><![CDATA[<p>For two strings s and t, we say “t divides s” if and only if s = t + t + t + … + t + t (i.e., t is concatenated with itself one or more times).</p> <p>Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Example</span> <span class="mi">1</span><span class="p">:</span>

<span class="n">Input</span><span class="p">:</span> <span class="n">str1</span> <span class="o">=</span> <span class="sh">"</span><span class="s">ABCABC</span><span class="sh">"</span><span class="p">,</span> <span class="n">str2</span> <span class="o">=</span> <span class="sh">"</span><span class="s">ABC</span><span class="sh">"</span>
<span class="n">Output</span><span class="p">:</span> <span class="sh">"</span><span class="s">ABC</span><span class="sh">"</span>

<span class="n">Example</span> <span class="mi">2</span><span class="p">:</span>

<span class="n">Input</span><span class="p">:</span> <span class="n">str1</span> <span class="o">=</span> <span class="sh">"</span><span class="s">ABABAB</span><span class="sh">"</span><span class="p">,</span> <span class="n">str2</span> <span class="o">=</span> <span class="sh">"</span><span class="s">ABAB</span><span class="sh">"</span>
<span class="n">Output</span><span class="p">:</span> <span class="sh">"</span><span class="s">AB</span><span class="sh">"</span>

<span class="n">Example</span> <span class="mi">3</span><span class="p">:</span>

<span class="n">Input</span><span class="p">:</span> <span class="n">str1</span> <span class="o">=</span> <span class="sh">"</span><span class="s">LEET</span><span class="sh">"</span><span class="p">,</span> <span class="n">str2</span> <span class="o">=</span> <span class="sh">"</span><span class="s">CODE</span><span class="sh">"</span>
<span class="n">Output</span><span class="p">:</span> <span class="sh">""</span>
</code></pre></div></div> <h2 id="brute-force">Brute Force</h2> <ul> <li>Time complexity: O(n)</li> <li>Memory complexity: O(1)</li> </ul> <p><img src="https://github.com/quocnh/quocnh.github.io/blob/55b2f67a46eda40abd0a9ac3122cc63419eb9086/assets/img/1071-Greatest%20Common%20Divisor%20of%20String.png" alt=""/></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="nf">valid</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">str1</span><span class="p">)</span><span class="o">%</span><span class="n">i</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">or</span> <span class="nf">len</span><span class="p">(</span><span class="n">str2</span><span class="p">)</span><span class="o">%</span><span class="n">i</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="n">ratio1</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">str1</span><span class="p">)</span><span class="o">//</span><span class="n">i</span>
            <span class="n">ratio2</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">str2</span><span class="p">)</span><span class="o">//</span><span class="n">i</span>
            <span class="n">base</span> <span class="o">=</span> <span class="n">str1</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span>
            <span class="k">return</span> <span class="n">base</span><span class="o">*</span><span class="n">ratio1</span> <span class="o">==</span> <span class="n">str1</span> <span class="ow">and</span> <span class="n">base</span><span class="o">*</span><span class="n">ratio2</span> <span class="o">==</span> <span class="n">str2</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range </span><span class="p">(</span><span class="nf">min</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">str1</span><span class="p">),</span> <span class="nf">len</span><span class="p">(</span><span class="n">str2</span><span class="p">)),</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="nf">valid</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
                <span class="k">return</span> <span class="n">str1</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span>
        <span class="k">return</span> <span class="sh">""</span>
</code></pre></div></div> <h2 id="euclidean-algorithm">Euclidean Algorithm</h2> <ul> <li>Time complexity: O(Log(Min(Len(Str1),Len(Str2)))</li> <li>Memory complexity: O(1) ```python</li> </ul> <p>class Solution(object): def gcdOfStrings(self, str1, str2): “”” :type str1: str :type str2: str :rtype: str “””</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    ## Euclidean Algorithm:

    # This algorithm works by repeatedly replacing the larger number with the remainder of the division of the two numbers. Mathematically:
    # gcd(a,b)=gcd(b,a%b)
    # The process continues until the remainder (bb) becomes zero.

    def gcd(a,b):
        while b:
            a, b = b, a%b
        return a

    # check if str1 and str2 have common gcd
    if str1 + str2 != str2 + str1:
        return ""
    tmp = gcd(len(str1), len(str2))
    str = str1[:tmp]
    return str ```
</code></pre></div></div>]]></content><author><name>Quoc Nguyen</name></author><category term="leetcode"/><summary type="html"><![CDATA[For two strings s and t, we say “t divides s” if and only if s=t + t + t + … + t + t (i.e., t is concatenated with itself one or more times).]]></summary></entry><entry><title type="html">1768. Merge Strings Alternately</title><link href="https://quocnh.github.io/blog/2024/leetcode-1768-merge-strings-alternately/" rel="alternate" type="text/html" title="1768. Merge Strings Alternately"/><published>2024-11-25T00:00:00+00:00</published><updated>2024-11-25T00:00:00+00:00</updated><id>https://quocnh.github.io/blog/2024/leetcode-1768-merge-strings-alternately</id><content type="html" xml:base="https://quocnh.github.io/blog/2024/leetcode-1768-merge-strings-alternately/"><![CDATA[<p>You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string.</p> <p>Return the merged string.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Example</span> <span class="mi">1</span><span class="p">:</span>

<span class="n">Input</span><span class="p">:</span> <span class="n">word1</span> <span class="o">=</span> <span class="sh">"</span><span class="s">abc</span><span class="sh">"</span><span class="p">,</span> <span class="n">word2</span> <span class="o">=</span> <span class="sh">"</span><span class="s">pqr</span><span class="sh">"</span>
<span class="n">Output</span><span class="p">:</span> <span class="sh">"</span><span class="s">apbqcr</span><span class="sh">"</span>
<span class="n">Explanation</span><span class="p">:</span> <span class="n">The</span> <span class="n">merged</span> <span class="n">string</span> <span class="n">will</span> <span class="n">be</span> <span class="n">merged</span> <span class="k">as</span> <span class="n">so</span><span class="p">:</span>
<span class="n">word1</span><span class="p">:</span>  <span class="n">a</span>   <span class="n">b</span>   <span class="n">c</span>
<span class="n">word2</span><span class="p">:</span>    <span class="n">p</span>   <span class="n">q</span>   <span class="n">r</span>
<span class="n">merged</span><span class="p">:</span> <span class="n">a</span> <span class="n">p</span> <span class="n">b</span> <span class="n">q</span> <span class="n">c</span> <span class="n">r</span>

<span class="n">Example</span> <span class="mi">2</span><span class="p">:</span>

<span class="n">Input</span><span class="p">:</span> <span class="n">word1</span> <span class="o">=</span> <span class="sh">"</span><span class="s">ab</span><span class="sh">"</span><span class="p">,</span> <span class="n">word2</span> <span class="o">=</span> <span class="sh">"</span><span class="s">pqrs</span><span class="sh">"</span>
<span class="n">Output</span><span class="p">:</span> <span class="sh">"</span><span class="s">apbqrs</span><span class="sh">"</span>
<span class="n">Explanation</span><span class="p">:</span> <span class="n">Notice</span> <span class="n">that</span> <span class="k">as</span> <span class="n">word2</span> <span class="ow">is</span> <span class="n">longer</span><span class="p">,</span> <span class="sh">"</span><span class="s">rs</span><span class="sh">"</span> <span class="ow">is</span> <span class="n">appended</span> <span class="n">to</span> <span class="n">the</span> <span class="n">end</span><span class="p">.</span>
<span class="n">word1</span><span class="p">:</span>  <span class="n">a</span>   <span class="n">b</span> 
<span class="n">word2</span><span class="p">:</span>    <span class="n">p</span>   <span class="n">q</span>   <span class="n">r</span>   <span class="n">s</span>
<span class="n">merged</span><span class="p">:</span> <span class="n">a</span> <span class="n">p</span> <span class="n">b</span> <span class="n">q</span>   <span class="n">r</span>   <span class="n">s</span>

<span class="n">Example</span> <span class="mi">3</span><span class="p">:</span>

<span class="n">Input</span><span class="p">:</span> <span class="n">word1</span> <span class="o">=</span> <span class="sh">"</span><span class="s">abcd</span><span class="sh">"</span><span class="p">,</span> <span class="n">word2</span> <span class="o">=</span> <span class="sh">"</span><span class="s">pq</span><span class="sh">"</span>
<span class="n">Output</span><span class="p">:</span> <span class="sh">"</span><span class="s">apbqcd</span><span class="sh">"</span>
<span class="n">Explanation</span><span class="p">:</span> <span class="n">Notice</span> <span class="n">that</span> <span class="k">as</span> <span class="n">word1</span> <span class="ow">is</span> <span class="n">longer</span><span class="p">,</span> <span class="sh">"</span><span class="s">cd</span><span class="sh">"</span> <span class="ow">is</span> <span class="n">appended</span> <span class="n">to</span> <span class="n">the</span> <span class="n">end</span><span class="p">.</span>
<span class="n">word1</span><span class="p">:</span>  <span class="n">a</span>   <span class="n">b</span>   <span class="n">c</span>   <span class="n">d</span>
<span class="n">word2</span><span class="p">:</span>    <span class="n">p</span>   <span class="n">q</span> 
<span class="n">merged</span><span class="p">:</span> <span class="n">a</span> <span class="n">p</span> <span class="n">b</span> <span class="n">q</span> <span class="n">c</span>   <span class="n">d</span>
</code></pre></div></div> <h2 id="two-pointers-solution">Two Pointers Solution</h2> <ul> <li> <p>Time complexity: O(n) </p> </li> <li> <p>Space complexity: O(n) </p> </li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">mergeAlternately</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">word1</span><span class="p">,</span> <span class="n">word2</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type word1: str
        :type word2: str
        :rtype: str
        </span><span class="sh">"""</span>
        <span class="nb">str</span> <span class="o">=</span> <span class="sh">""</span>
        <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="nf">while</span><span class="p">(</span><span class="n">i</span><span class="o">!=</span><span class="nf">len</span><span class="p">(</span><span class="n">word1</span><span class="p">)</span> <span class="ow">or</span> <span class="n">j</span><span class="o">!=</span><span class="nf">len</span><span class="p">(</span><span class="n">word2</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">i</span><span class="o">!=</span><span class="nf">len</span><span class="p">(</span><span class="n">word1</span><span class="p">):</span>
                <span class="nb">str</span> <span class="o">+=</span> <span class="n">word1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>
            <span class="k">if</span> <span class="n">j</span> <span class="o">!=</span> <span class="nf">len</span><span class="p">(</span><span class="n">word2</span><span class="p">):</span>
                <span class="nb">str</span> <span class="o">+=</span> <span class="n">word2</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
                <span class="n">j</span><span class="o">+=</span><span class="mi">1</span>
        <span class="k">return</span> <span class="nb">str</span>
</code></pre></div></div> <h2 id="one-pointer-solution">One Pointer Solution</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">mergeAlternately</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">word1</span><span class="p">,</span> <span class="n">word2</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type word1: str
        :type word2: str
        :rtype: str
        </span><span class="sh">"""</span>
        <span class="c1">## One pointer solution
</span>
        <span class="nb">str</span> <span class="o">=</span> <span class="sh">""</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">word1</span><span class="p">),</span> <span class="nf">len</span><span class="p">(</span><span class="n">word2</span><span class="p">))):</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">word1</span><span class="p">):</span>
                <span class="nb">str</span> <span class="o">+=</span> <span class="n">word1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">word2</span><span class="p">):</span>
                <span class="nb">str</span> <span class="o">+=</span> <span class="n">word2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">return</span> <span class="nb">str</span>
</code></pre></div></div>]]></content><author><name>Quoc Nguyen</name></author><category term="leetcode"/><summary type="html"><![CDATA[You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string.]]></summary></entry><entry><title type="html">NLP Text Processing and Star Rating Analysis Application</title><link href="https://quocnh.github.io/blog/2024/nlp-starreview-aws-sagemaker-autopilot/" rel="alternate" type="text/html" title="NLP Text Processing and Star Rating Analysis Application"/><published>2024-11-23T00:00:00+00:00</published><updated>2024-11-23T00:00:00+00:00</updated><id>https://quocnh.github.io/blog/2024/nlp-starreview-aws-sagemaker-autopilot</id><content type="html" xml:base="https://quocnh.github.io/blog/2024/nlp-starreview-aws-sagemaker-autopilot/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>Natural Language Processing (NLP) is pivotal in deriving insights from text data. This tutorial demonstrates an end-to-end application where we process text reviews and predict their star ratings.</p> <p>We will use Python, the <code class="language-plaintext highlighter-rouge">pandas</code>, <code class="language-plaintext highlighter-rouge">nltk</code>, <code class="language-plaintext highlighter-rouge">sklearn</code>, and <code class="language-plaintext highlighter-rouge">matplotlib</code> libraries for implementation. Key steps include:</p> <ul> <li>Text cleaning and tokenization.</li> <li>Exploratory Data Analysis (EDA).</li> <li>Sentiment-based feature engineering.</li> <li>Building and evaluating predictive models.</li> </ul> <hr/> <h2 id="dataset-and-preprocessing">Dataset and Preprocessing</h2> <p>We use a public dataset containing text reviews and star ratings. Download and load the dataset using <code class="language-plaintext highlighter-rouge">pandas</code>:</p> <p>```python import pandas as pd</p> <h1 id="load-dataset">Load dataset</h1> <p>data = pd.read_csv(‘reviews.csv’) print(data.head())</p>]]></content><author><name>Quoc Nguyen</name></author><category term="data_science"/><summary type="html"><![CDATA[A practical guide to applying NLP techniques for analyzing text and predicting star ratings.]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://quocnh.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://quocnh.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://quocnh.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">a post with tabs</title><link href="https://quocnh.github.io/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://quocnh.github.io/blog/2024/tabs</id><content type="html" xml:base="https://quocnh.github.io/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="df9fd150-7168-4e49-ba5b-ec5876c991e1" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="df9fd150-7168-4e49-ba5b-ec5876c991e1" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="ad5bc424-ee34-4d18-b6f9-5cc8bdc8288e" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="ad5bc424-ee34-4d18-b6f9-5cc8bdc8288e" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="5ecd799a-ed76-4ee0-9d09-10aad491dfcd" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="5ecd799a-ed76-4ee0-9d09-10aad491dfcd" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry></feed>