<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://quocnh.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://quocnh.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-11-27T12:48:08+00:00</updated><id>https://quocnh.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">1431. Kids With the Greatest Number of Candies</title><link href="https://quocnh.github.io/blog/2024/1431.KidsWiththeGreatestNumberofCandies/" rel="alternate" type="text/html" title="1431. Kids With the Greatest Number of Candies"/><published>2024-11-26T00:00:00+00:00</published><updated>2024-11-26T00:00:00+00:00</updated><id>https://quocnh.github.io/blog/2024/1431.KidsWiththeGreatestNumberofCandies</id><content type="html" xml:base="https://quocnh.github.io/blog/2024/1431.KidsWiththeGreatestNumberofCandies/"><![CDATA[<h2 id="solution">Solution</h2> <ul> <li>Time complexity: O(n)</li> <li>Memory complexity: O(1)</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">kidsWithCandies</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">candies</span><span class="p">,</span> <span class="n">extraCandies</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type candies: List[int]
        :type extraCandies: int
        :rtype: List[bool]
        </span><span class="sh">"""</span>
        <span class="n">output</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">tmp</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">candies</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">candies</span><span class="p">)):</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">candies</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">extraCandies</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">tmp</span><span class="p">:</span>
                <span class="n">output</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">output</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">output</span>
</code></pre></div></div>]]></content><author><name>Quoc Nguyen</name></author><category term="leetcode"/><summary type="html"><![CDATA[Solution]]></summary></entry><entry><title type="html">605. Can Place Flowers</title><link href="https://quocnh.github.io/blog/2024/can_place_flowers/" rel="alternate" type="text/html" title="605. Can Place Flowers"/><published>2024-11-26T00:00:00+00:00</published><updated>2024-11-26T00:00:00+00:00</updated><id>https://quocnh.github.io/blog/2024/can_place_flowers</id><content type="html" xml:base="https://quocnh.github.io/blog/2024/can_place_flowers/"><![CDATA[<h2 id="solution">Solution</h2> <ul> <li>Time complexity: O(n). A single scan of the flowerbed array of size n is done.</li> <li>Space complexity: O(1). Constant extra space is used.</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">canPlaceFlowers</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">flowerbed</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type flowerbed: List[int]
        :type n: int
        :rtype: bool
        </span><span class="sh">"""</span>
       <span class="c1"># Check all current plot has 0 whether it is left_empty_plot or right_empty_plot (check first and last plot)
</span>       <span class="c1"># if the current plot has left and right empty, then we can plant a tree ( count ++)
</span>       <span class="c1"># if count &gt;= n return True
</span>
        <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">flowerbed</span><span class="p">)):</span>
            <span class="c1"># if (i == 0) or (flowerbed[i-1] == 0)
</span>            <span class="c1">#     left_empty_plot = True
</span>            <span class="c1"># else:
</span>            <span class="c1">#     left_empty_plot = False
</span>            <span class="k">if</span> <span class="n">flowerbed</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">left_empty_plot</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">flowerbed</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
                <span class="n">right_empty_plot</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="n">flowerbed</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">flowerbed</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>

                <span class="k">if</span> <span class="n">left_empty_plot</span> <span class="ow">and</span> <span class="n">right_empty_plot</span><span class="p">:</span>
                    <span class="n">flowerbed</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
                    <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">if</span> <span class="n">count</span> <span class="o">&gt;=</span> <span class="n">n</span><span class="p">:</span>
                        <span class="k">return</span> <span class="bp">True</span>
        <span class="k">return</span> <span class="n">count</span> <span class="o">&gt;=</span> <span class="n">n</span>

</code></pre></div></div>]]></content><author><name>Quoc Nguyen</name></author><category term="leetcode"/><summary type="html"><![CDATA[Solution]]></summary></entry><entry><title type="html">1071. Greatest Common Divisor of String</title><link href="https://quocnh.github.io/blog/2024/leetcode-greatest-common-divisors-of-string/" rel="alternate" type="text/html" title="1071. Greatest Common Divisor of String"/><published>2024-11-26T00:00:00+00:00</published><updated>2024-11-26T00:00:00+00:00</updated><id>https://quocnh.github.io/blog/2024/leetcode-greatest-common-divisors-of-string</id><content type="html" xml:base="https://quocnh.github.io/blog/2024/leetcode-greatest-common-divisors-of-string/"><![CDATA[<p>For two strings s and t, we say “t divides s” if and only if s = t + t + t + … + t + t (i.e., t is concatenated with itself one or more times).</p> <p>Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Example</span> <span class="mi">1</span><span class="p">:</span>

<span class="n">Input</span><span class="p">:</span> <span class="n">str1</span> <span class="o">=</span> <span class="sh">"</span><span class="s">ABCABC</span><span class="sh">"</span><span class="p">,</span> <span class="n">str2</span> <span class="o">=</span> <span class="sh">"</span><span class="s">ABC</span><span class="sh">"</span>
<span class="n">Output</span><span class="p">:</span> <span class="sh">"</span><span class="s">ABC</span><span class="sh">"</span>

<span class="n">Example</span> <span class="mi">2</span><span class="p">:</span>

<span class="n">Input</span><span class="p">:</span> <span class="n">str1</span> <span class="o">=</span> <span class="sh">"</span><span class="s">ABABAB</span><span class="sh">"</span><span class="p">,</span> <span class="n">str2</span> <span class="o">=</span> <span class="sh">"</span><span class="s">ABAB</span><span class="sh">"</span>
<span class="n">Output</span><span class="p">:</span> <span class="sh">"</span><span class="s">AB</span><span class="sh">"</span>

<span class="n">Example</span> <span class="mi">3</span><span class="p">:</span>

<span class="n">Input</span><span class="p">:</span> <span class="n">str1</span> <span class="o">=</span> <span class="sh">"</span><span class="s">LEET</span><span class="sh">"</span><span class="p">,</span> <span class="n">str2</span> <span class="o">=</span> <span class="sh">"</span><span class="s">CODE</span><span class="sh">"</span>
<span class="n">Output</span><span class="p">:</span> <span class="sh">""</span>
</code></pre></div></div> <h2 id="brute-force">Brute Force</h2> <ul> <li>Time complexity: O(n)</li> <li>Memory complexity: O(1)</li> </ul> <p><img src="https://github.com/quocnh/quocnh.github.io/blob/55b2f67a46eda40abd0a9ac3122cc63419eb9086/assets/img/1071-Greatest%20Common%20Divisor%20of%20String.png" alt=""/></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="nf">valid</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">str1</span><span class="p">)</span><span class="o">%</span><span class="n">i</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">or</span> <span class="nf">len</span><span class="p">(</span><span class="n">str2</span><span class="p">)</span><span class="o">%</span><span class="n">i</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="n">ratio1</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">str1</span><span class="p">)</span><span class="o">//</span><span class="n">i</span>
            <span class="n">ratio2</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">str2</span><span class="p">)</span><span class="o">//</span><span class="n">i</span>
            <span class="n">base</span> <span class="o">=</span> <span class="n">str1</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span>
            <span class="k">return</span> <span class="n">base</span><span class="o">*</span><span class="n">ratio1</span> <span class="o">==</span> <span class="n">str1</span> <span class="ow">and</span> <span class="n">base</span><span class="o">*</span><span class="n">ratio2</span> <span class="o">==</span> <span class="n">str2</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range </span><span class="p">(</span><span class="nf">min</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">str1</span><span class="p">),</span> <span class="nf">len</span><span class="p">(</span><span class="n">str2</span><span class="p">)),</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="nf">valid</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
                <span class="k">return</span> <span class="n">str1</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span>
        <span class="k">return</span> <span class="sh">""</span>
</code></pre></div></div> <h2 id="euclidean-algorithm">Euclidean Algorithm</h2> <ul> <li>Time complexity: O(Log(Min(Len(Str1),Len(Str2)))</li> <li>Memory complexity: O(1) ```python</li> </ul> <p>class Solution(object): def gcdOfStrings(self, str1, str2): “”” :type str1: str :type str2: str :rtype: str “””</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    ## Euclidean Algorithm:

    # This algorithm works by repeatedly replacing the larger number with the remainder of the division of the two numbers. Mathematically:
    # gcd(a,b)=gcd(b,a%b)
    # The process continues until the remainder (bb) becomes zero.

    def gcd(a,b):
        while b:
            a, b = b, a%b
        return a

    # check if str1 and str2 have common gcd
    if str1 + str2 != str2 + str1:
        return ""
    tmp = gcd(len(str1), len(str2))
    str = str1[:tmp]
    return str ```
</code></pre></div></div>]]></content><author><name>Quoc Nguyen</name></author><category term="leetcode"/><summary type="html"><![CDATA[For two strings s and t, we say “t divides s” if and only if s=t + t + t + … + t + t (i.e., t is concatenated with itself one or more times).]]></summary></entry><entry><title type="html">1768. Merge Strings Alternately</title><link href="https://quocnh.github.io/blog/2024/leetcode-1768-merge-strings-alternately/" rel="alternate" type="text/html" title="1768. Merge Strings Alternately"/><published>2024-11-25T00:00:00+00:00</published><updated>2024-11-25T00:00:00+00:00</updated><id>https://quocnh.github.io/blog/2024/leetcode-1768-merge-strings-alternately</id><content type="html" xml:base="https://quocnh.github.io/blog/2024/leetcode-1768-merge-strings-alternately/"><![CDATA[<h2 id="two-pointers-solution">Two Pointers Solution</h2> <ul> <li> <p>Time complexity: O(n) </p> </li> <li> <p>Space complexity: O(n) </p> </li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">mergeAlternately</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">word1</span><span class="p">,</span> <span class="n">word2</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type word1: str
        :type word2: str
        :rtype: str
        </span><span class="sh">"""</span>
        <span class="nb">str</span> <span class="o">=</span> <span class="sh">""</span>
        <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="nf">while</span><span class="p">(</span><span class="n">i</span><span class="o">!=</span><span class="nf">len</span><span class="p">(</span><span class="n">word1</span><span class="p">)</span> <span class="ow">or</span> <span class="n">j</span><span class="o">!=</span><span class="nf">len</span><span class="p">(</span><span class="n">word2</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">i</span><span class="o">!=</span><span class="nf">len</span><span class="p">(</span><span class="n">word1</span><span class="p">):</span>
                <span class="nb">str</span> <span class="o">+=</span> <span class="n">word1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>
            <span class="k">if</span> <span class="n">j</span> <span class="o">!=</span> <span class="nf">len</span><span class="p">(</span><span class="n">word2</span><span class="p">):</span>
                <span class="nb">str</span> <span class="o">+=</span> <span class="n">word2</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
                <span class="n">j</span><span class="o">+=</span><span class="mi">1</span>
        <span class="k">return</span> <span class="nb">str</span>
</code></pre></div></div> <h2 id="one-pointer-solution">One Pointer Solution</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">mergeAlternately</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">word1</span><span class="p">,</span> <span class="n">word2</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type word1: str
        :type word2: str
        :rtype: str
        </span><span class="sh">"""</span>
        <span class="c1">## One pointer solution
</span>
        <span class="nb">str</span> <span class="o">=</span> <span class="sh">""</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">word1</span><span class="p">),</span> <span class="nf">len</span><span class="p">(</span><span class="n">word2</span><span class="p">))):</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">word1</span><span class="p">):</span>
                <span class="nb">str</span> <span class="o">+=</span> <span class="n">word1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">word2</span><span class="p">):</span>
                <span class="nb">str</span> <span class="o">+=</span> <span class="n">word2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">return</span> <span class="nb">str</span>
</code></pre></div></div>]]></content><author><name>Quoc Nguyen</name></author><category term="leetcode"/><summary type="html"><![CDATA[Two Pointers Solution]]></summary></entry><entry><title type="html">NLP Text Processing and Star Rating Analysis Application</title><link href="https://quocnh.github.io/blog/2024/nlp-starreview-aws-sagemaker-autopilot/" rel="alternate" type="text/html" title="NLP Text Processing and Star Rating Analysis Application"/><published>2024-11-23T00:00:00+00:00</published><updated>2024-11-23T00:00:00+00:00</updated><id>https://quocnh.github.io/blog/2024/nlp-starreview-aws-sagemaker-autopilot</id><content type="html" xml:base="https://quocnh.github.io/blog/2024/nlp-starreview-aws-sagemaker-autopilot/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>Natural Language Processing (NLP) is pivotal in deriving insights from text data. This tutorial demonstrates an end-to-end application where we process text reviews and predict their star ratings.</p> <p>We will use Python, the <code class="language-plaintext highlighter-rouge">pandas</code>, <code class="language-plaintext highlighter-rouge">nltk</code>, <code class="language-plaintext highlighter-rouge">sklearn</code>, and <code class="language-plaintext highlighter-rouge">matplotlib</code> libraries for implementation. Key steps include:</p> <ul> <li>Text cleaning and tokenization.</li> <li>Exploratory Data Analysis (EDA).</li> <li>Sentiment-based feature engineering.</li> <li>Building and evaluating predictive models.</li> </ul> <hr/> <h2 id="dataset-and-preprocessing">Dataset and Preprocessing</h2> <p>We use a public dataset containing text reviews and star ratings. Download and load the dataset using <code class="language-plaintext highlighter-rouge">pandas</code>:</p> <p>```python import pandas as pd</p> <h1 id="load-dataset">Load dataset</h1> <p>data = pd.read_csv(‘reviews.csv’) print(data.head())</p>]]></content><author><name>Quoc Nguyen</name></author><category term="data_science"/><summary type="html"><![CDATA[A practical guide to applying NLP techniques for analyzing text and predicting star ratings.]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://quocnh.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://quocnh.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://quocnh.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">a post with tabs</title><link href="https://quocnh.github.io/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://quocnh.github.io/blog/2024/tabs</id><content type="html" xml:base="https://quocnh.github.io/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="aa727aed-e85a-40bc-9b4b-9b98b0737073" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="aa727aed-e85a-40bc-9b4b-9b98b0737073" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="4c5c3a07-f8fa-4c16-ba1f-fc5d172bdcd3" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="4c5c3a07-f8fa-4c16-ba1f-fc5d172bdcd3" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="c63d3bf2-a784-4aae-89fe-4a7c0173996a" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="c63d3bf2-a784-4aae-89fe-4a7c0173996a" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with typograms</title><link href="https://quocnh.github.io/blog/2024/typograms/" rel="alternate" type="text/html" title="a post with typograms"/><published>2024-04-29T23:36:10+00:00</published><updated>2024-04-29T23:36:10+00:00</updated><id>https://quocnh.github.io/blog/2024/typograms</id><content type="html" xml:base="https://quocnh.github.io/blog/2024/typograms/"><![CDATA[<p>This is an example post with some <a href="https://github.com/google/typograms/">typograms</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">+----+
|    |---&gt; My first diagram!
+----+</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-typograms">+----+
|    |---&gt; My first diagram!
+----+
</code></pre> <p>Another example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.</span>
<span class="p">```</span>
</code></pre></div></div> <p>which generates:</p> <pre><code class="language-typograms">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.
</code></pre> <p>For more examples, check out the <a href="https://google.github.io/typograms/#examples">typograms documentation</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included typograms code could look like]]></summary></entry><entry><title type="html">a post that can be cited</title><link href="https://quocnh.github.io/blog/2024/post-citation/" rel="alternate" type="text/html" title="a post that can be cited"/><published>2024-04-28T15:06:00+00:00</published><updated>2024-04-28T15:06:00+00:00</updated><id>https://quocnh.github.io/blog/2024/post-citation</id><content type="html" xml:base="https://quocnh.github.io/blog/2024/post-citation/"><![CDATA[<p>This is an example post that can be cited. The content of the post ends here, while the citation information is automatically provided below. The only thing needed is for you to set the <code class="language-plaintext highlighter-rouge">citation</code> key in the front matter to <code class="language-plaintext highlighter-rouge">true</code>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="citation"/><summary type="html"><![CDATA[this is what a post that can be cited looks like]]></summary></entry><entry><title type="html">a post with pseudo code</title><link href="https://quocnh.github.io/blog/2024/pseudocode/" rel="alternate" type="text/html" title="a post with pseudo code"/><published>2024-04-15T00:01:00+00:00</published><updated>2024-04-15T00:01:00+00:00</updated><id>https://quocnh.github.io/blog/2024/pseudocode</id><content type="html" xml:base="https://quocnh.github.io/blog/2024/pseudocode/"><![CDATA[<p>This is an example post with some pseudo code rendered by <a href="https://github.com/SaswatPadhi/pseudocode.js">pseudocode</a>. The example presented here is the same as the one in the <a href="https://saswat.padhi.me/pseudocode.js/">pseudocode.js</a> documentation, with only one simple but important change: everytime you would use <code class="language-plaintext highlighter-rouge">$</code>, you should use <code class="language-plaintext highlighter-rouge">$$</code> instead. Also, note that the <code class="language-plaintext highlighter-rouge">pseudocode</code> key in the front matter is set to <code class="language-plaintext highlighter-rouge">true</code> to enable the rendering of pseudo code. As an example, using this code:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">pseudocode
</span><span class="sb">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Generates:</p> <pre><code class="language-pseudocode">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included pseudo code could look like]]></summary></entry></feed>